From 4a2291d151c9b9fdcac7f25ed767a91f9b9a54b2 Mon Sep 17 00:00:00 2001
From: Roman Meshkevich <roman.meshkevich@cogentembedded.com>
Date: Mon, 31 Oct 2016 11:36:30 +0300
Subject: [PATCH 6/6] media: imr: temp solution on V2H

---
 drivers/media/platform/rcar_imr.c | 20 ++++++++------------
 1 file changed, 8 insertions(+), 12 deletions(-)

diff --git a/drivers/media/platform/rcar_imr.c b/drivers/media/platform/rcar_imr.c
index d640612..ac397eb 100644
--- a/drivers/media/platform/rcar_imr.c
+++ b/drivers/media/platform/rcar_imr.c
@@ -48,6 +48,7 @@ struct imr_cfg {
 
 	/* ...pointers to the source/destination planes */
 	u32                    *src_pa_ptr[2];
+
 	u32                    *dst_pa_ptr[2];
 
 	/* ...subpixel destination coordinates space */
@@ -595,7 +596,7 @@ static inline u16 __imr_clce(u32 type)
 
 /*******************************************************************************
  * Type A (absolute coordinates of source/destination) mapping
- ******************************************************************************/
+******************************************************************************/
 
 /* ...return size of the subroutine for type "a" mapping */
 static inline u32 imr_tri_type_a_get_length(struct imr_mesh *mesh, int item_size)
@@ -610,7 +611,6 @@ static inline u32 * imr_tri_set_type_a(u32 *dl, void *map, struct imr_mesh *mesh
 	int     columns = mesh->columns;
 	u32     stride = item_size * columns;
 	int     i, j;
-
 	/* ...convert lattice into set of stripes */
 	for (i = 0; i < rows - 1; i++) {
 		*dl++ = IMR_OP_TRI(columns * 2);
@@ -753,8 +753,9 @@ static inline void imr_dl_program_setup(struct imr_ctx *ctx, struct imr_cfg *cfg
 	*dl++ = IMR_OP_WTS(IMR_CPDPOR, __imr_cpdp(type));
 
 	/* ...reset rendering mode registers */
-	*dl++ = IMR_OP_WTS(IMR_CMRCCR, 0xFFFF);
+	*dl++ = IMR_OP_WTS(IMR_CMRCCR, 0xFFFE);
 	*dl++ = IMR_OP_WTS(IMR_CMRCCR2, 0xFFFF);
+	//*dl++ = IMR_OP_WTS(IMR_CMRCSR, 0x1);
 
 	/* ...set source/destination addresses of Y/UV plane */
 	*dl++ = IMR_OP_WTL(IMR_DSAR, 2);
@@ -782,9 +783,8 @@ static inline void imr_dl_program_setup(struct imr_ctx *ctx, struct imr_cfg *cfg
 	} else {
 		u16		src_fmt = (iflags & IMR_F_UV_SWAP ? IMR_CMR2_UVFORM : 0) | (iflags & IMR_F_YUV_SWAP ? IMR_CMR2_YUV422FORM : 0);
 		u32		dst_fmt = (oflags & IMR_F_YUV_SWAP ? IMR_TRIC_YCFORM : 0);
-
 		/* ...interleaved input; output is either interleaved or planar */
-		*dl++ = IMR_OP_WTS(IMR_CMRCSR2, IMR_CMR2_YUV422E | src_fmt);
+//		*dl++ = IMR_OP_WTS(IMR_CMRCSR2, IMR_CMR2_YUV422E | src_fmt);
 
 		/* ...destination is always YUYV or UYVY */
 		*dl++ = IMR_OP_WTL(IMR_TRICR, 1);
@@ -794,6 +794,7 @@ static inline void imr_dl_program_setup(struct imr_ctx *ctx, struct imr_cfg *cfg
 		*dl++ = IMR_OP_WTS(IMR_CMRCSR, src_y_fmt | src_uv_fmt | dst_y_fmt | dst_uv_fmt | __imr_clce(type) | __imr_luce(type));
 
 		/* ...set source stride basing on precision (2 or 4 bytes/pixel) */
+		/**/
 		*dl++ = IMR_OP_WTS(IMR_SSTR, w << (iflags & IMR_F_Y10 ? 2 : 1));
 
 		/* ...if output is planar, put the offset value */
@@ -905,7 +906,6 @@ static int imr_ioctl_map(struct imr_ctx *ctx, struct imr_map_desc *desc)
 		if (type & (IMR_MAP_AUTODG | IMR_MAP_AUTOSG)) {
 			/* ...source / destination vertex size is 4 bytes */
 			item_size += 4;
-
 			/* ...mapping is given using automatic generation pattern; check size */
 			if (mesh->rows * mesh->columns * item_size != length) {
 				v4l2_err(&imr->v4l2_dev, "invalid mesh size: %u*%u*%u != %u\n", mesh->rows, mesh->columns, item_size, length);
@@ -918,7 +918,6 @@ static int imr_ioctl_map(struct imr_ctx *ctx, struct imr_map_desc *desc)
 		} else {
 			/* ...source / destination vertes size if 8 bytes */
 			item_size += 8;
-
 			/* ...mapping is done with absolute coordinates */
 			if (mesh->rows * mesh->columns * item_size != length) {
 				v4l2_err(&imr->v4l2_dev, "invalid mesh size: %u*%u*%u != %u\n", mesh->rows, mesh->columns, item_size, length);
@@ -943,7 +942,6 @@ static int imr_ioctl_map(struct imr_ctx *ctx, struct imr_map_desc *desc)
 			ret = -EINVAL;
 			goto out;
 		}
-
 		vbo = (struct imr_vbo *)buf;
 		length -= sizeof(struct imr_vbo);
 		map = buf + sizeof(struct imr_vbo);
@@ -972,7 +970,6 @@ static int imr_ioctl_map(struct imr_ctx *ctx, struct imr_map_desc *desc)
 		ret = -EINVAL;
 		goto out;
 	}
-
 	/* ...we use a single display list, with TRI subroutine prepending MAIN */
 	dl_size += dl_start_offset;
 
@@ -986,11 +983,9 @@ static int imr_ioctl_map(struct imr_ctx *ctx, struct imr_map_desc *desc)
 		v4l2_err(&imr->v4l2_dev, "failed to create configuration: %d\n", ret);
 		goto out;
 	}
-
 	/* ...get pointer to the new display list */
 	dl_vaddr = cfg->dl_vaddr;
 	dl_dma_addr = cfg->dl_dma_addr;
-
 	/* ...prepare a triangles drawing subroutine */
 	if (type & IMR_MAP_MESH) {
 		if (type & (IMR_MAP_AUTOSG | IMR_MAP_AUTODG)) {
@@ -1042,7 +1037,7 @@ static int __imr_try_fmt(struct imr_ctx *ctx, struct v4l2_format *f)
 			/* ...fix-up format specification as needed */
 			pix->field = V4L2_FIELD_NONE;
 
-			v4l2_dbg(1, debug, &ctx->imr->v4l2_dev, "format request: '%c%c%c%c', %d*%d\n",
+			 v4l2_dbg(1, debug, &ctx->imr->v4l2_dev, "format request: '%c%c%c%c', %d*%d\n",
 				(fourcc >> 0) & 0xff, (fourcc >> 8) & 0xff,
 				(fourcc >> 16) & 0xff, (fourcc >> 24) & 0xff,
 				pix->width, pix->height);
@@ -1536,6 +1531,7 @@ static void imr_device_run(void *priv)
 	wmb();
 
 	/* ...start rendering operation */
+	iowrite32(0x1,imr->mmio + IMR_CMRCSR);
 	iowrite32(IMR_CR_RS, imr->mmio + IMR_CR);
 
 	/* ...timestamp input buffer */
-- 
2.7.4

