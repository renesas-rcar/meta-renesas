From 92da930faf9a76b97a6024eaae90fb67cdae328f Mon Sep 17 00:00:00 2001
From: Vladimir Barinov <vladimir.barinov@cogentembedded.com>
Date: Thu, 13 Oct 2016 18:33:52 +0300
Subject: [PATCH 5/5] Revert "mmc: sh_mobile_sdhi: Add UHS-I mode support for
 r8a7795"

This reverts commit f5bf37a1f76ab924136c63355ea1cbc7d87a2b52.
---
 drivers/mmc/host/sh_mobile_sdhi.c | 395 --------------------------------------
 1 file changed, 395 deletions(-)

diff --git a/drivers/mmc/host/sh_mobile_sdhi.c b/drivers/mmc/host/sh_mobile_sdhi.c
index 2127818..a1669b4 100644
--- a/drivers/mmc/host/sh_mobile_sdhi.c
+++ b/drivers/mmc/host/sh_mobile_sdhi.c
@@ -41,11 +41,6 @@
 
 #define host_to_priv(host) container_of((host)->pdata, struct sh_mobile_sdhi, mmc_data)
 
-struct sh_mobile_sdhi_scc {
-	unsigned long clk;	/* clock for SDR104 */
-	u32 tap;		/* sampling clock position for SDR104 */
-};
-
 struct sh_mobile_sdhi_of_data {
 	unsigned long tmio_flags;
 	unsigned long capabilities;
@@ -56,9 +51,6 @@ struct sh_mobile_sdhi_of_data {
 	unsigned int max_blk_count;
 	unsigned short max_segs;
 	bool sdbuf_64bit;
-	int scc_offset;
-	struct sh_mobile_sdhi_scc *taps;
-	int taps_num;
 };
 
 static const struct sh_mobile_sdhi_of_data of_default_cfg = {
@@ -71,35 +63,12 @@ static const struct sh_mobile_sdhi_of_data of_rcar_gen1_compatible = {
 	.capabilities	= MMC_CAP_SD_HIGHSPEED | MMC_CAP_SDIO_IRQ,
 };
 
-/* Definitions for sampling clocks */
-static struct sh_mobile_sdhi_scc rcar_gen2_scc_taps[] = {
-	{
-		.clk = 156000000,
-		.tap = 0x00000703,
-	},
-	{
-		.clk = 0,
-		.tap = 0x00000300,
-	},
-};
-
 static const struct sh_mobile_sdhi_of_data of_rcar_gen2_compatible = {
 	.tmio_flags	= TMIO_MMC_HAS_IDLE_WAIT | TMIO_MMC_WRPROTECT_DISABLE |
 			  TMIO_MMC_CLK_ACTUAL | TMIO_MMC_MIN_RCAR2,
 	.capabilities	= MMC_CAP_SD_HIGHSPEED | MMC_CAP_SDIO_IRQ,
 	.dma_buswidth	= DMA_SLAVE_BUSWIDTH_4_BYTES,
 	.dma_rx_offset	= 0x2000,
-	.scc_offset = 0x0300,
-	.taps = rcar_gen2_scc_taps,
-	.taps_num = ARRAY_SIZE(rcar_gen2_scc_taps),
-};
-
-/* Definitions for sampling clocks */
-static struct sh_mobile_sdhi_scc rcar_gen3_scc_taps[] = {
-	{
-		.clk = 0,
-		.tap = 0x00000300,
-	},
 };
 
 static const struct sh_mobile_sdhi_of_data of_rcar_gen3_compatible = {
@@ -113,9 +82,6 @@ static const struct sh_mobile_sdhi_of_data of_rcar_gen3_compatible = {
 	.max_blk_count	= 0xffffffff,
 	.max_segs = 1,
 	.sdbuf_64bit = true,
-	.scc_offset = 0x1000,
-	.taps = rcar_gen3_scc_taps,
-	.taps_num = ARRAY_SIZE(rcar_gen3_scc_taps),
 };
 
 static const struct of_device_id sh_mobile_sdhi_of_match[] = {
@@ -135,20 +101,12 @@ static const struct of_device_id sh_mobile_sdhi_of_match[] = {
 };
 MODULE_DEVICE_TABLE(of, sh_mobile_sdhi_of_match);
 
-struct sh_mobile_sdhi_vlt {
-	u32 base;		/* base address for IO voltage */
-	u32 offset;		/* offset value for IO voltage */
-	u32 mask;		/* bit mask position for IO voltage */
-	u32 size;		/* bit mask size for IO voltage */
-};
-
 struct sh_mobile_sdhi {
 	struct clk *clk;
 	struct tmio_mmc_data mmc_data;
 	struct tmio_mmc_dma dma_priv;
 	struct pinctrl *pinctrl;
 	struct pinctrl_state *pins_default, *pins_uhs;
-	struct sh_mobile_sdhi_vlt vlt;
 };
 
 static void sh_mobile_sdhi_sdbuf_width(struct tmio_mmc_host *host, int width)
@@ -258,57 +216,6 @@ static void sh_mobile_sdhi_clk_disable(struct tmio_mmc_host *host)
 	clk_disable_unprepare(priv->clk);
 }
 
-static void sh_mobile_sdhi_set_clk_div(struct platform_device *pdev,
-				       int state)
-{
-	struct mmc_host *mmc = platform_get_drvdata(pdev);
-	struct tmio_mmc_host *host = mmc_priv(mmc);
-
-	if (state) {
-		sd_ctrl_write16(host, CTL_SD_CARD_CLK_CTL, ~0x0100 &
-				sd_ctrl_read16(host, CTL_SD_CARD_CLK_CTL));
-		sd_ctrl_write16(host, CTL_SD_CARD_CLK_CTL, 0x00ff);
-	}
-}
-
-#define SH_MOBILE_SDHI_SIGNAL_180V	0
-#define SH_MOBILE_SDHI_SIGNAL_330V	1
-
-static void sh_mobile_sdhi_set_ioctrl(struct tmio_mmc_host *host, int state)
-{
-	struct platform_device *pdev = host->pdev;
-	void __iomem *pmmr, *ioctrl;
-	unsigned int ctrl, mask;
-	struct sh_mobile_sdhi *priv =
-		container_of(host->pdata, struct sh_mobile_sdhi, mmc_data);
-	struct sh_mobile_sdhi_vlt *vlt = &priv->vlt;
-
-	if (!vlt)
-		return;
-
-	pmmr = ioremap(vlt->base, 0x04);
-	ioctrl = ioremap(vlt->base + vlt->offset, 0x04);
-
-	ctrl = ioread32(ioctrl);
-	/* Set 1.8V/3.3V */
-	mask = vlt->size << vlt->mask;
-
-	if (state == SH_MOBILE_SDHI_SIGNAL_330V)
-		ctrl |= mask;
-	else if (state == SH_MOBILE_SDHI_SIGNAL_180V)
-		ctrl &= ~mask;
-	else {
-		dev_err(&pdev->dev, "update_ioctrl: unknown state\n");
-		goto err;
-	}
-
-	iowrite32(~ctrl, pmmr);
-	iowrite32(ctrl, ioctrl);
-err:
-	iounmap(pmmr);
-	iounmap(ioctrl);
-}
-
 static int sh_mobile_sdhi_start_signal_voltage_switch(struct mmc_host *mmc,
 						      struct mmc_ios *ios)
 {
@@ -319,53 +226,9 @@ static int sh_mobile_sdhi_start_signal_voltage_switch(struct mmc_host *mmc,
 
 	switch (ios->signal_voltage) {
 	case MMC_SIGNAL_VOLTAGE_330:
-		/* Enable 3.3V Signal */
-		if (!IS_ERR(mmc->supply.vqmmc)) {
-			/* ioctrl */
-			ret = sh_mobile_sdhi_set_ioctrl(host,
-						SH_MOBILE_SDHI_SIGNAL_330V);
-			if (ret) {
-				dev_err(&host->pdev->dev,
-					"3.3V pin function control failed\n");
-				return -EIO;
-			}
-
-			ret = regulator_set_voltage(mmc->supply.vqmmc,
-						    3300000, 3300000);
-			if (ret) {
-				dev_warn(&host->pdev->dev,
-					 "3.3V signalling voltage failed\n");
-				return -EIO;
-			}
-		} else {
-			return -EIO;
-		}
-		usleep_range(5000, 10000);
 		pin_state = priv->pins_default;
 		break;
 	case MMC_SIGNAL_VOLTAGE_180:
-		/* Enable 1.8V Signal */
-		if (!IS_ERR(mmc->supply.vqmmc)) {
-			ret = regulator_set_voltage(mmc->supply.vqmmc,
-						    1800000, 1800000);
-			if (ret) {
-				dev_warn(&host->pdev->dev,
-					 "1.8V signalling voltage failed\n");
-				return -EIO;
-			}
-			/* ioctrl */
-			ret = sh_mobile_sdhi_set_ioctrl(host,
-						SH_MOBILE_SDHI_SIGNAL_180V);
-			if (ret) {
-				dev_err(&host->pdev->dev,
-					"1.8V pin function control failed\n");
-				return -EIO;
-			}
-		} else {
-			return -EIO;
-		}
-		/* Wait for 5ms */
-		usleep_range(5000, 10000);
 		pin_state = priv->pins_uhs;
 		break;
 	default:
@@ -396,197 +259,6 @@ static int sh_mobile_sdhi_card_busy(struct tmio_mmc_host *host)
 	return !(dat0 & TMIO_STAT_DAT0);
 }
 
-/* SCC registers */
-#define SH_MOBILE_SDHI_SCC_DTCNTL	0x000
-#define SH_MOBILE_SDHI_SCC_TAPSET	0x002
-#define SH_MOBILE_SDHI_SCC_DT2FF	0x004
-#define SH_MOBILE_SDHI_SCC_CKSEL	0x006
-#define SH_MOBILE_SDHI_SCC_RVSCNTL	0x008
-#define SH_MOBILE_SDHI_SCC_RVSREQ	0x00A
-
-/* Definitions for values the SH_MOBILE_SDHI_SCC_DTCNTL register */
-#define SH_MOBILE_SDHI_SCC_DTCNTL_TAPEN		(1 << 0)
-/* Definitions for values the SH_MOBILE_SDHI_SCC_CKSEL register */
-#define SH_MOBILE_SDHI_SCC_CKSEL_DTSEL		(1 << 0)
-/* Definitions for values the SH_MOBILE_SDHI_SCC_RVSCNTL register */
-#define SH_MOBILE_SDHI_SCC_RVSCNTL_RVSEN	(1 << 0)
-/* Definitions for values the SH_MOBILE_SDHI_SCC_RVSREQ register */
-#define SH_MOBILE_SDHI_SCC_RVSREQ_RVSERR	(1 << 2)
-
-static inline u32 sd_scc_read32(struct tmio_mmc_host *host, int addr)
-{
-	struct platform_device *pdev = host->pdev;
-	const struct of_device_id *of_id =
-		of_match_device(sh_mobile_sdhi_of_match, &pdev->dev);
-	const struct sh_mobile_sdhi_of_data *of_data = of_id->data;
-
-	return readl(host->ctl + of_data->scc_offset +
-		     (addr << host->bus_shift));
-}
-
-static inline void sd_scc_write32(struct tmio_mmc_host *host, int addr,
-				  u32 val)
-{
-	struct platform_device *pdev = host->pdev;
-	const struct of_device_id *of_id =
-		of_match_device(sh_mobile_sdhi_of_match, &pdev->dev);
-	const struct sh_mobile_sdhi_of_data *of_data = of_id->data;
-
-	writel(val, host->ctl + of_data->scc_offset +
-	       (addr << host->bus_shift));
-}
-
-static bool sh_mobile_sdhi_inquiry_tuning(struct tmio_mmc_host *host)
-{
-	/* SDHI should be tuning only SDR104 */
-	if (host->mmc->ios.timing == MMC_TIMING_UHS_SDR104)
-		return true;
-	else
-		return false;
-}
-
-static void sh_mobile_sdhi_init_tuning(struct tmio_mmc_host *host,
-							unsigned long *num)
-{
-	/* set sampling clock selection range */
-	if (host->scc_tapnum)
-		sd_scc_write32(host, SH_MOBILE_SDHI_SCC_DTCNTL,
-				host->scc_tapnum << 16);
-
-	/* Initialize SCC */
-	sd_ctrl_write32_as_16_and_16(host, CTL_STATUS, 0x00000000);
-
-	sd_scc_write32(host, SH_MOBILE_SDHI_SCC_DTCNTL,
-		SH_MOBILE_SDHI_SCC_DTCNTL_TAPEN |
-		sd_scc_read32(host, SH_MOBILE_SDHI_SCC_DTCNTL));
-
-	sd_ctrl_write16(host, CTL_SD_CARD_CLK_CTL, ~0x0100 &
-		sd_ctrl_read16(host, CTL_SD_CARD_CLK_CTL));
-
-	sd_scc_write32(host, SH_MOBILE_SDHI_SCC_CKSEL,
-		SH_MOBILE_SDHI_SCC_CKSEL_DTSEL |
-		sd_scc_read32(host, SH_MOBILE_SDHI_SCC_CKSEL));
-
-	sd_ctrl_write16(host, CTL_SD_CARD_CLK_CTL, 0x0100 |
-		sd_ctrl_read16(host, CTL_SD_CARD_CLK_CTL));
-
-	sd_scc_write32(host, SH_MOBILE_SDHI_SCC_RVSCNTL,
-		~SH_MOBILE_SDHI_SCC_RVSCNTL_RVSEN &
-		sd_scc_read32(host, SH_MOBILE_SDHI_SCC_RVSCNTL));
-
-	sd_scc_write32(host, SH_MOBILE_SDHI_SCC_DT2FF, host->scc_tappos);
-
-	/* Read TAPNUM */
-	*num = (sd_scc_read32(host, SH_MOBILE_SDHI_SCC_DTCNTL) >> 16) & 0xff;
-}
-
-static int sh_mobile_sdhi_prepare_tuning(struct tmio_mmc_host *host,
-							unsigned long tap)
-{
-	/* Set sampling clock position */
-	sd_scc_write32(host, SH_MOBILE_SDHI_SCC_TAPSET, tap);
-
-	return 0;
-}
-
-#define SH_MOBILE_SDHI_MAX_TAP	3
-static int sh_mobile_sdhi_select_tuning(struct tmio_mmc_host *host,
-							unsigned long *tap)
-{
-	unsigned long tap_num;	/* total number of taps */
-	unsigned long tap_cnt;	/* counter of tuning success */
-	unsigned long tap_set;	/* tap position */
-	unsigned long tap_start;	/* start position of tuning success */
-	unsigned long tap_end;	/* end position of tuning success */
-	unsigned long ntap;	/* temporary counter of tuning success */
-	unsigned long i;
-
-	/* Clear SCC_RVSREQ */
-	sd_scc_write32(host, SH_MOBILE_SDHI_SCC_RVSREQ, 0);
-
-	/* Select SCC */
-	tap_num = (sd_scc_read32(host,
-				 SH_MOBILE_SDHI_SCC_DTCNTL) >> 16) & 0xff;
-
-	tap_cnt = 0;
-	ntap = 0;
-	tap_start = 0;
-	tap_end = 0;
-	for (i = 0; i < tap_num * 2; i++) {
-		if (tap[i] == 0)
-			ntap++;
-		else {
-			if (ntap > tap_cnt) {
-				tap_start = i - ntap;
-				tap_end = i - 1;
-				tap_cnt = ntap;
-			}
-			ntap = 0;
-		}
-	}
-
-	if (ntap > tap_cnt) {
-		tap_start = i - ntap;
-		tap_end = i - 1;
-		tap_cnt = ntap;
-	}
-
-	if (tap_cnt >= SH_MOBILE_SDHI_MAX_TAP)
-		tap_set = (tap_start + tap_end) / 2 % tap_num;
-	else
-		return -EIO;
-
-	/* Set SCC */
-	sd_scc_write32(host, SH_MOBILE_SDHI_SCC_TAPSET, tap_set);
-
-	/* Enable auto re-tuning */
-	sd_scc_write32(host, SH_MOBILE_SDHI_SCC_RVSCNTL,
-		SH_MOBILE_SDHI_SCC_RVSCNTL_RVSEN |
-		sd_scc_read32(host, SH_MOBILE_SDHI_SCC_RVSCNTL));
-
-	return 0;
-}
-
-static bool sh_mobile_sdhi_retuning(struct tmio_mmc_host *host)
-{
-	/* Check SCC error */
-	if (sd_scc_read32(host, SH_MOBILE_SDHI_SCC_RVSCNTL) &
-	    SH_MOBILE_SDHI_SCC_RVSCNTL_RVSEN &&
-	    sd_scc_read32(host, SH_MOBILE_SDHI_SCC_RVSREQ) &
-	    SH_MOBILE_SDHI_SCC_RVSREQ_RVSERR) {
-		/* Clear SCC error */
-		sd_scc_write32(host, SH_MOBILE_SDHI_SCC_RVSREQ, 0);
-		return true;
-	}
-	return false;
-}
-
-static void sh_mobile_sdhi_hw_reset(struct tmio_mmc_host *host)
-{
-	struct tmio_mmc_data *pdata = host->pdata;
-
-	if (pdata->flags & TMIO_MMC_HAS_UHS_SCC) {
-		/* Reset SCC */
-		sd_ctrl_write16(host, CTL_SD_CARD_CLK_CTL, ~0x0100 &
-			sd_ctrl_read16(host, CTL_SD_CARD_CLK_CTL));
-
-		sd_scc_write32(host, SH_MOBILE_SDHI_SCC_CKSEL,
-			~SH_MOBILE_SDHI_SCC_CKSEL_DTSEL &
-			sd_scc_read32(host, SH_MOBILE_SDHI_SCC_CKSEL));
-
-		sd_ctrl_write16(host, CTL_SD_CARD_CLK_CTL, 0x0100 |
-			sd_ctrl_read16(host, CTL_SD_CARD_CLK_CTL));
-
-		sd_scc_write32(host, SH_MOBILE_SDHI_SCC_RVSCNTL,
-			~SH_MOBILE_SDHI_SCC_RVSCNTL_RVSEN &
-			sd_scc_read32(host, SH_MOBILE_SDHI_SCC_RVSCNTL));
-
-		sd_scc_write32(host, SH_MOBILE_SDHI_SCC_RVSCNTL,
-			~SH_MOBILE_SDHI_SCC_RVSCNTL_RVSEN &
-			sd_scc_read32(host, SH_MOBILE_SDHI_SCC_RVSCNTL));
-	}
-}
-
 static int sh_mobile_sdhi_wait_idle(struct tmio_mmc_host *host)
 {
 	int timeout = 1000;
@@ -661,11 +333,6 @@ static int sh_mobile_sdhi_probe(struct platform_device *pdev)
 	struct resource *res;
 	int irq, ret, i = 0;
 	struct tmio_mmc_dma *dma_priv;
-	const struct device_node *np = pdev->dev.of_node;
-	int clk_rate;
-	struct sh_mobile_sdhi_vlt *vlt;
-	u32 pfcs[2], mask[2];
-	u32 num, tapnum = 0, tappos;
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res)
@@ -677,7 +344,6 @@ static int sh_mobile_sdhi_probe(struct platform_device *pdev)
 
 	mmc_data = &priv->mmc_data;
 	dma_priv = &priv->dma_priv;
-	vlt = &priv->vlt;
 
 	priv->clk = devm_clk_get(&pdev->dev, NULL);
 	if (IS_ERR(priv->clk)) {
@@ -686,33 +352,6 @@ static int sh_mobile_sdhi_probe(struct platform_device *pdev)
 		goto eprobe;
 	}
 
-	if (np && !of_property_read_u32(np, "renesas,clk-rate", &clk_rate)) {
-		if (clk_rate) {
-			clk_prepare_enable(priv->clk);
-			ret = clk_set_rate(priv->clk, clk_rate);
-			if (ret < 0)
-				dev_err(&pdev->dev,
-					"cannot set clock rate: %d\n", ret);
-
-			clk_disable_unprepare(priv->clk);
-		}
-	}
-
-	if (np && !of_property_read_u32_array(np, "renesas,pfcs", pfcs, 2)) {
-		if (pfcs[0]) {
-			vlt->base = pfcs[0];
-			vlt->offset = pfcs[1];
-		}
-	}
-
-	if (np && !of_property_read_u32_array(np, "renesas,id", mask, 2)) {
-		vlt->mask = mask[0];
-		vlt->size = mask[1];
-	}
-
-	if (np && !of_property_read_u32(np, "renesas,mmc-scc-tapnum", &num))
-		tapnum = num;
-
 	priv->pinctrl = devm_pinctrl_get(&pdev->dev);
 	if (!IS_ERR(priv->pinctrl)) {
 		priv->pins_default = pinctrl_lookup_state(priv->pinctrl,
@@ -729,7 +368,6 @@ static int sh_mobile_sdhi_probe(struct platform_device *pdev)
 
 	if (of_id && of_id->data) {
 		const struct sh_mobile_sdhi_of_data *of_data = of_id->data;
-		const struct sh_mobile_sdhi_scc *taps = of_data->taps;
 
 		mmc_data->flags |= of_data->tmio_flags;
 		mmc_data->capabilities |= of_data->capabilities;
@@ -738,32 +376,7 @@ static int sh_mobile_sdhi_probe(struct platform_device *pdev)
 		mmc_data->max_blk_count	= of_data->max_blk_count;
 		mmc_data->max_segs = of_data->max_segs;
 		dma_priv->dma_buswidth = of_data->dma_buswidth;
-		dma_priv->sdbuf_64bit = of_data->sdbuf_64bit;
 		host->bus_shift = of_data->bus_shift;
-		if (np && !of_property_read_u32(np, "renesas,mmc-scc-tappos",
-						&tappos)) {
-			host->scc_tappos = tappos;
-		} else {
-			for (i = 0, taps = of_data->taps;
-			     i < of_data->taps_num; i++, taps++) {
-				if (taps->clk == 0 || taps->clk == clk_rate) {
-					host->scc_tappos = taps->tap;
-					break;
-				}
-			}
-			if (taps->clk != 0 && taps->clk != clk_rate)
-				dev_warn(&host->pdev->dev, "Unknown clock rate for SDR104 and HS200\n");
-		}
-	}
-
-	if (of_find_property(np, "sd-uhs-sdr50", NULL))
-		mmc_data->capabilities |= MMC_CAP_UHS_SDR50;
-	if (of_find_property(np, "sd-uhs-sdr104", NULL))
-		mmc_data->capabilities |= MMC_CAP_UHS_SDR104;
-
-	if (mmc_data->capabilities & MMC_CAP_UHS_SDR104) {
-		mmc_data->capabilities |= MMC_CAP_HW_RESET;
-		mmc_data->flags |= TMIO_MMC_HAS_UHS_SCC;
 	}
 
 	host->dma		= dma_priv;
@@ -773,16 +386,8 @@ static int sh_mobile_sdhi_probe(struct platform_device *pdev)
 	host->clk_disable	= sh_mobile_sdhi_clk_disable;
 	host->card_busy		= sh_mobile_sdhi_card_busy;
 	host->multi_io_quirk	= sh_mobile_sdhi_multi_io_quirk;
-	host->set_clk_div	= sh_mobile_sdhi_set_clk_div;
 	host->start_signal_voltage_switch =
 			sh_mobile_sdhi_start_signal_voltage_switch;
-	host->inquiry_tuning = sh_mobile_sdhi_inquiry_tuning;
-	host->init_tuning = sh_mobile_sdhi_init_tuning;
-	host->prepare_tuning = sh_mobile_sdhi_prepare_tuning;
-	host->select_tuning = sh_mobile_sdhi_select_tuning;
-	host->retuning = sh_mobile_sdhi_retuning;
-	host->hw_reset = sh_mobile_sdhi_hw_reset;
-	host->scc_tapnum = tapnum;
 
 	/* Orginally registers were 16 bit apart, could be 32 or 64 nowadays */
 	if (resource_size(res) > 0x400)
-- 
1.9.1

