From 36d5d88024898ac2c9b43ee5be53cd16c5578f58 Mon Sep 17 00:00:00 2001
From: Vladimir Barinov <vladimir.barinov@cogentembedded.com>
Date: Tue, 5 Jul 2016 19:29:32 +0300
Subject: [PATCH] board: renesas: Add H3ULCB board

H3ULCB is an entry level development board based on R-Car H3 SoC (R8A7795)

Signed-off-by: Vladimir Barinov <vladimir.barinov@cogentembedded.com>
---
 arch/arm/cpu/armv8/Kconfig       |   6 +-
 board/renesas/ulcb/Kconfig       |  18 +++
 board/renesas/ulcb/MAINTAINERS   |   6 +
 board/renesas/ulcb/Makefile      |  10 ++
 board/renesas/ulcb/ulcb.c        | 301 +++++++++++++++++++++++++++++++++++++++
 common/cmd_load.c                |   2 +-
 configs/h3ulcb_defconfig         |   7 +
 drivers/serial/serial_sh.c       |   4 +-
 include/configs/h3ulcb.h         | 120 ++++++++++++++++
 9 files changed, 470 insertions(+), 4 deletions(-)
 create mode 100644 board/renesas/ulcb/Kconfig
 create mode 100644 board/renesas/ulcb/MAINTAINERS
 create mode 100644 board/renesas/ulcb/Makefile
 create mode 100644 board/renesas/ulcb/ulcb.c
 create mode 100644 configs/h3ulcb_defconfig
 create mode 100644 include/configs/h3ulcb.h

diff --git a/arch/arm/cpu/armv8/Kconfig b/arch/arm/cpu/armv8/Kconfig
index 2daadc9..353df92 100644
--- a/arch/arm/cpu/armv8/Kconfig
+++ b/arch/arm/cpu/armv8/Kconfig
@@ -13,6 +13,9 @@ choice
 config TARGET_SALVATOR_X
         bool "Salvator-X board"
 
+config TARGET_ULCB
+        bool "ULCB board"
+
 endchoice
 
 choice
@@ -20,9 +23,10 @@ config SYS_SOC
 
 config RMOBILE_EXTRAM_BOOT
         bool "Enable boot from RAM"
-        depends on TARGET_SALVATOR_X
+        depends on TARGET_SALVATOR_X || TARGET_ULCB
         default n
 
 source "board/renesas/salvator-x/Kconfig"
+source "board/renesas/ulcb/Kconfig"
 
 endif
diff --git a/board/renesas/ulcb/Kconfig b/board/renesas/ulcb/Kconfig
new file mode 100644
index 0000000..1fc4b47
--- /dev/null
+++ b/board/renesas/ulcb/Kconfig
@@ -0,0 +1,15 @@
+if TARGET_ULCB
+
+config SYS_SOC
+	default "rcar_gen3"
+
+config SYS_BOARD
+	default "ulcb"
+
+config SYS_VENDOR
+	default "renesas"
+
+config SYS_CONFIG_NAME
+	default "h3ulcb"
+
+endif
diff --git a/board/renesas/ulcb/MAINTAINERS b/board/renesas/ulcb/MAINTAINERS
new file mode 100644
index 0000000..bceea97
--- /dev/null
+++ b/board/renesas/ulcb/MAINTAINERS
@@ -0,0 +1,6 @@
+ULCB BOARD
+M:	Cogent Embedded, Inc. <source@cogentembedded.com>
+S:	Maintained
+F:	board/renesas/ulcb/
+F:	include/configs/h3ulcb.h
+F:	configs/h3ulcb_defconfig
diff --git a/board/renesas/ulcb/Makefile b/board/renesas/ulcb/Makefile
new file mode 100644
index 0000000..5c03383
--- /dev/null
+++ b/board/renesas/ulcb/Makefile
@@ -0,0 +1,10 @@
+#
+# board/renesas/ulcb/Makefile
+#
+# Copyright (C) 2016 Renesas Electronics Corporation
+# Copyright (C) 2016 Cogent Embedded, Inc.
+#
+# SPDX-License-Identifier: GPL-2.0+
+#
+
+obj-y	:= ulcb.o ../rcar-gen3-common/common.o
diff --git a/board/renesas/ulcb/ulcb.c b/board/renesas/ulcb/ulcb.c
new file mode 100644
index 0000000..e46a132
--- /dev/null
+++ b/board/renesas/ulcb/ulcb.c
@@ -0,0 +1,291 @@
+/*
+ * board/renesas/ulcb/ulcb.c
+ *     This file is ULCB board support.
+ *
+ * Copyright (C) 2016 Renesas Electronics Corporation
+ * Copyright (C) 2016 Cogent Embedded, Inc.
+ *
+ * SPDX-License-Identifier: GPL-2.0+
+ */
+
+#include <common.h>
+#include <malloc.h>
+#include <netdev.h>
+#include <dm.h>
+#include <dm/platform_data/serial_sh.h>
+#include <asm/processor.h>
+#include <asm/mach-types.h>
+#include <asm/io.h>
+#include <asm/errno.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/gpio.h>
+#include <asm/arch/prr_depend.h>
+#include <asm/arch/gpio.h>
+#include <asm/arch/rcar_gen3.h>
+#include <asm/arch/rcar-mstp.h>
+#include <asm/arch/sh_sdhi.h>
+#include <i2c.h>
+#include <mmc.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define SCIF2_MSTP310	(1 << 10)
+#define ETHERAVB_MSTP812	(1 << 12)
+#define DVFS_MSTP926	(1 << 26)
+#define SD0_MSTP314	(1 << 14)
+#define SD1_MSTP313	(1 << 13)
+#define SD2_MSTP312	(1 << 12)
+#define SD3_MSTP311	(1 << 11)
+
+#define SD0CKCR		0xE6150074
+#define SD1CKCR		0xE6150078
+#define SD2CKCR		0xE6150268
+#define SD3CKCR		0xE615026C
+
+int board_early_init_f(void)
+{
+	int freq;
+
+	rcar_prr_init();
+
+	/* SCIF2 */
+	mstp_clrbits_le32(MSTPSR3, SMSTPCR3, SCIF2_MSTP310);
+	/* EHTERAVB */
+	mstp_clrbits_le32(MSTPSR8, SMSTPCR8, ETHERAVB_MSTP812);
+	/* eMMC */
+	mstp_clrbits_le32(MSTPSR3, SMSTPCR3, SD1_MSTP313 | SD2_MSTP312);
+	/* SDHI0 */
+	mstp_clrbits_le32(MSTPSR3, SMSTPCR3, SD0_MSTP314);
+
+	freq = rcar_get_sdhi_config_clk();
+	writel(freq, SD0CKCR);
+	writel(freq, SD1CKCR);
+	writel(freq, SD2CKCR);
+	writel(freq, SD3CKCR);
+
+#if defined(CONFIG_SYS_I2C) && defined(CONFIG_SYS_I2C_SH)
+	/* DVFS for reset */
+	mstp_clrbits_le32(MSTPSR9, SMSTPCR9, DVFS_MSTP926);
+#endif
+	return 0;
+}
+
+/* PFC */
+#define PFC_PMMR	0xE6060000
+#define PFC_DRVCTRL2	0xE6060308
+#define PFC_DRVCTRL3	0xE606030C
+#define PFC_DRVCTRL5	0xE6060314
+#define PFC_DRVCTRL6	0xE6060318
+#define PFC_DRVCTRL7	0xE606031C
+#define PFC_DRVCTRL10	0xE6060328
+#define PFC_DRVCTRL11	0xE606032C
+#define PFC_DRVCTRL13	0xE6060334
+#define PFC_DRVCTRL15	0xE606033C
+#define PFC_DRVCTRL16	0xE6060340
+
+DECLARE_GLOBAL_DATA_PTR;
+
+static void write_drvctrl(u32 value, u32 modify_bit, void *reg)
+{
+	u32 val;
+
+	val = readl(reg);
+	val &= ~modify_bit;
+	val |= value;
+	writel(~val, PFC_PMMR);
+	writel(val, reg);
+}
+
+int board_init(void)
+{
+	u32 val;
+
+	/* adress of boot parameters */
+	gd->bd->bi_boot_params = CONFIG_SYS_TEXT_BASE + 0x50000;
+
+	/* Init PFC controller */
+	pinmux_init();
+
+	/* USB1 pull-up */
+	val = readl(PFC_PUEN6) | PUEN_USB1_OVC | PUEN_USB1_PWEN;
+	writel(val, PFC_PUEN6);
+
+	/* SD(SD0/SD3) driveability */
+	if (rcar_need_reconfig_sdhi_drvctrl()) {
+		write_drvctrl(0x00222222, 0x00777777, (void *)PFC_DRVCTRL13);
+		write_drvctrl(0x00000222, 0x00000777, (void *)PFC_DRVCTRL15);
+		write_drvctrl(0x22200000, 0x77700000, (void *)PFC_DRVCTRL16);
+	}
+
+#ifdef CONFIG_RAVB
+	/* GPSR2 */
+	gpio_request(GPIO_GFN_AVB_AVTP_CAPTURE_A, NULL);
+	gpio_request(GPIO_GFN_AVB_AVTP_MATCH_A, NULL);
+	gpio_request(GPIO_GFN_AVB_LINK, NULL);
+	gpio_request(GPIO_GFN_AVB_PHY_INT, NULL);
+	gpio_request(GPIO_GFN_AVB_MAGIC, NULL);
+	gpio_request(GPIO_GFN_AVB_MDC, NULL);
+
+	/* IPSR0 */
+	gpio_request(GPIO_IFN_AVB_MDC, NULL);
+	gpio_request(GPIO_IFN_AVB_MAGIC, NULL);
+	gpio_request(GPIO_IFN_AVB_PHY_INT, NULL);
+	gpio_request(GPIO_IFN_AVB_LINK, NULL);
+	gpio_request(GPIO_IFN_AVB_AVTP_MATCH_A, NULL);
+	gpio_request(GPIO_IFN_AVB_AVTP_CAPTURE_A, NULL);
+	/* IPSR1 */
+	gpio_request(GPIO_FN_AVB_AVTP_PPS, NULL);
+	/* IPSR2 */
+	gpio_request(GPIO_FN_AVB_AVTP_MATCH_B, NULL);
+	/* IPSR3 */
+	gpio_request(GPIO_FN_AVB_AVTP_CAPTURE_B, NULL);
+
+	/* EtherAVB */
+	write_drvctrl(0x00000333, 0x00000777, (void *)PFC_DRVCTRL2);
+	write_drvctrl(0x33300000, 0x77700000, (void *)PFC_DRVCTRL3);
+
+	/* AVB_PHY_RST */
+	gpio_request(GPIO_GP_2_10, NULL);
+	gpio_direction_output(GPIO_GP_2_10, 0);
+	mdelay(20);
+	gpio_set_value(GPIO_GP_2_10, 1);
+	udelay(1);
+#endif
+
+	return 0;
+}
+
+#define MAHR	0xE68005C0
+#define MALR	0xE68005C8
+int board_eth_init(bd_t *bis)
+{
+	int ret = -ENODEV;
+	u32 val;
+	unsigned char enetaddr[6];
+
+	if (!eth_getenv_enetaddr("ethaddr", enetaddr))
+		return ret;
+
+	/* Set Mac address */
+	val = enetaddr[0] << 24 | enetaddr[1] << 16 |
+	    enetaddr[2] << 8 | enetaddr[3];
+	writel(val, MAHR);
+
+	val = enetaddr[4] << 8 | enetaddr[5];
+	writel(val, MALR);
+
+#ifdef CONFIG_RAVB
+	ret = ravb_initialize(bis);
+#endif
+	return ret;
+}
+
+/* ULCB has KSZ9031RNX */
+int board_phy_config(struct phy_device *phydev)
+{
+	return 0;
+}
+
+int board_mmc_init(bd_t *bis)
+{
+	int ret = -ENODEV;
+
+#ifdef CONFIG_SH_SDHI
+	/* SDHI0 */
+	gpio_request(GPIO_GFN_SD0_DAT0, NULL);
+	gpio_request(GPIO_GFN_SD0_DAT1, NULL);
+	gpio_request(GPIO_GFN_SD0_DAT2, NULL);
+	gpio_request(GPIO_GFN_SD0_DAT3, NULL);
+	gpio_request(GPIO_GFN_SD0_CLK, NULL);
+	gpio_request(GPIO_GFN_SD0_CMD, NULL);
+	gpio_request(GPIO_GFN_SD0_CD, NULL);
+	gpio_request(GPIO_GFN_SD0_WP, NULL);
+
+	gpio_request(GPIO_GP_5_2, NULL);
+	gpio_request(GPIO_GP_5_1, NULL);
+	gpio_direction_output(GPIO_GP_5_2, 1); /* power on */
+	gpio_direction_output(GPIO_GP_5_1, 1); /* 1: 3.3V, 0: 1.8V */
+
+	ret = sh_sdhi_init(CONFIG_SYS_SH_SDHI0_BASE, 0,
+			   SH_SDHI_QUIRK_64BIT_BUF);
+	if (ret)
+		return ret;
+
+	/* SDHI1/SDHI2, eMMC */
+	gpio_request(GPIO_GFN_SD1_DAT0, NULL);
+	gpio_request(GPIO_GFN_SD1_DAT1, NULL);
+	gpio_request(GPIO_GFN_SD1_DAT2, NULL);
+	gpio_request(GPIO_GFN_SD1_DAT3, NULL);
+	gpio_request(GPIO_GFN_SD2_DAT0, NULL);
+	gpio_request(GPIO_GFN_SD2_DAT1, NULL);
+	gpio_request(GPIO_GFN_SD2_DAT2, NULL);
+	gpio_request(GPIO_GFN_SD2_DAT3, NULL);
+	gpio_request(GPIO_GFN_SD2_CLK, NULL);
+	gpio_request(GPIO_FN_SD2_CMD, NULL);
+
+	gpio_request(GPIO_GP_5_3, NULL);
+	gpio_request(GPIO_GP_5_9, NULL);
+	gpio_direction_output(GPIO_GP_5_3, 0); /* 1: 3.3V, 0: 1.8V */
+	gpio_direction_output(GPIO_GP_5_9, 0); /* 1: 3.3V, 0: 1.8V */
+
+	ret = sh_sdhi_init(CONFIG_SYS_SH_SDHI2_BASE, 1,
+			   SH_SDHI_QUIRK_64BIT_BUF);
+	if (ret)
+		return ret;
+#endif
+	return ret;
+}
+
+
+int dram_init(void)
+{
+	gd->ram_size = PHYS_SDRAM_1_SIZE;
+#if (CONFIG_NR_DRAM_BANKS >= 2)
+	gd->ram_size += PHYS_SDRAM_2_SIZE;
+#endif
+#if (CONFIG_NR_DRAM_BANKS >= 3)
+	gd->ram_size += PHYS_SDRAM_3_SIZE;
+#endif
+#if (CONFIG_NR_DRAM_BANKS >= 4)
+	gd->ram_size += PHYS_SDRAM_4_SIZE;
+#endif
+
+	return 0;
+}
+
+void dram_init_banksize(void)
+{
+	gd->bd->bi_dram[0].start = PHYS_SDRAM_1;
+	gd->bd->bi_dram[0].size = PHYS_SDRAM_1_SIZE;
+#if (CONFIG_NR_DRAM_BANKS >= 2)
+	gd->bd->bi_dram[1].start = PHYS_SDRAM_2;
+	gd->bd->bi_dram[1].size = PHYS_SDRAM_2_SIZE;
+#endif
+#if (CONFIG_NR_DRAM_BANKS >= 3)
+	gd->bd->bi_dram[2].start = PHYS_SDRAM_3;
+	gd->bd->bi_dram[2].size = PHYS_SDRAM_3_SIZE;
+#endif
+#if (CONFIG_NR_DRAM_BANKS >= 4)
+	gd->bd->bi_dram[3].start = PHYS_SDRAM_4;
+	gd->bd->bi_dram[3].size = PHYS_SDRAM_4_SIZE;
+#endif
+}
+
+const struct rcar_sysinfo sysinfo = {
+	CONFIG_RCAR_BOARD_STRING
+};
+
+void reset_cpu(ulong addr)
+{
+#if defined(CONFIG_SYS_I2C) && defined(CONFIG_SYS_I2C_SH)
+	i2c_reg_write(CONFIG_SYS_I2C_POWERIC_ADDR, 0x20, 0x80);
+#endif
+}
+
+#if defined(CONFIG_DISPLAY_BOARDINFO)
+int checkboard(void)
+{
+	printf("Board: %s\n", sysinfo.board_string);
+	return 0;
+}
+#endif
diff --git a/common/cmd_load.c b/common/cmd_load.c
index 6962e39..c796e65 100644
--- a/common/cmd_load.c
+++ b/common/cmd_load.c
@@ -150,7 +150,7 @@ static ulong load_serial(long offset)
 		case SREC_DATA3:
 		case SREC_DATA4:
 		    store_addr = addr + offset;
-#ifdef CONFIG_TARGET_SALVATOR_X
+#if defined(CONFIG_TARGET_SALVATOR_X) || defined(CONFIG_TARGET_ULCB)
 		    if ((store_addr >= CONFIG_SYS_TEXT_BASE) &&
 				(store_addr <= CONFIG_SYS_INIT_SP_ADDR)) {
 			printf("Program area is can't over write(0x%08lX)\n",
diff --git a/configs/h3ulcb_defconfig b/configs/h3ulcb_defconfig
new file mode 100644
index 0000000..5249122
--- /dev/null
+++ b/configs/h3ulcb_defconfig
@@ -0,0 +1,7 @@
+CONFIG_ARM=y
+CONFIG_RCAR_GEN3=y
+CONFIG_DM_SERIAL=y
+CONFIG_TARGET_ULCB=y
+CONFIG_R8A7795=y
+CONFIG_SPL=y
+CONFIG_SH_SDHI=y
diff --git a/drivers/serial/serial_sh.c b/drivers/serial/serial_sh.c
index 77b20f6..9c11f37 100644
--- a/drivers/serial/serial_sh.c
+++ b/drivers/serial/serial_sh.c
@@ -15,7 +15,7 @@
 #include <serial.h>
 #include <linux/compiler.h>
 #include <dm/platform_data/serial_sh.h>
-#ifdef CONFIG_TARGET_SALVATOR_X
+#if defined(CONFIG_TARGET_SALVATOR_X) || defined(CONFIG_TARGET_ULCB)
 #include <asm/arch/prr_depend.h>
 #endif
 #include "serial_sh.h"
@@ -254,7 +254,7 @@ static void sh_serial_setbrg(void)
 {
 	DECLARE_GLOBAL_DATA_PTR;
 	struct uart_port *port = &sh_sci;
-#ifdef CONFIG_TARGET_SALVATOR_X
+#if defined(CONFIG_TARGET_SALVATOR_X) || defined(CONFIG_TARGET_ULCB)
 	int freq;
 
 	freq = rcar_get_serial_config_clk();
diff --git a/include/configs/h3ulcb.h b/include/configs/h3ulcb.h
new file mode 100644
index 0000000..726bccf
--- /dev/null
+++ b/include/configs/h3ulcb.h
@@ -0,0 +1,120 @@
+/*
+ * include/configs/h3ulcb.h
+ *     This file is ULCB board configuration.
+ *     CPU r8a7795.
+ *
+ * Copyright (C) 2016 Renesas Electronics Corporation
+ * Copyright (C) 2016 Cogent Embedded, Inc.
+ *
+ * SPDX-License-Identifier: GPL-2.0+
+ */
+
+#ifndef __H3ULCB_H
+#define __H3ULCB_H
+
+#undef DEBUG
+#define CONFIG_RCAR_BOARD_STRING "H3ULCB"
+#define CONFIG_RCAR_TARGET_STRING "r8a7795"
+
+#include "rcar-gen3-common.h"
+
+/* Cache Definitions */
+#define CONFIG_SYS_DCACHE_OFF
+#define CONFIG_SYS_ICACHE_OFF
+
+/* SCIF */
+#define CONFIG_SCIF_CONSOLE
+#define CONFIG_CONS_SCIF2
+#define CONFIG_SH_SCIF_CLK_FREQ	CONFIG_S3D4_CLK_FREQ
+
+#define CONFIG_SYS_NO_FLASH
+
+/* Ethernet RAVB */
+#define CONFIG_RAVB
+#define CONFIG_RAVB_PHY_ADDR	0x0
+#define CONFIG_RAVB_PHY_MODE	PHY_INTERFACE_MODE_RGMII_ID
+#define CONFIG_NET_MULTI
+#define CONFIG_PHYLIB
+#define CONFIG_PHY_MICREL
+#define CONFIG_BITBANGMII
+#define CONFIG_BITBANGMII_MULTI
+#define CONFIG_SH_ETHER_BITBANG
+
+/* Board Clock */
+/* XTAL_CLK : 33.33MHz */
+#define RCAR_XTAL_CLK		33333333u
+#define CONFIG_SYS_CLK_FREQ	RCAR_XTAL_CLK
+/* ch0to2 CPclk, ch3to11 S3D2_PEREclk, ch12to14 S3D2_RTclk */
+/* CPclk 16.66MHz, S3D2 133.33MHz , S3D4 66.66MHz */
+#define CONFIG_CP_CLK_FREQ	(CONFIG_SYS_CLK_FREQ / 2)
+#define CONFIG_PLL1_CLK_FREQ	(CONFIG_SYS_CLK_FREQ * 192 / 2)
+#define CONFIG_S3D2_CLK_FREQ	(266666666u/2)
+#define CONFIG_S3D4_CLK_FREQ	(266666666u/4)
+
+/* Generic Timer Definitions (use in assembler source) */
+#define COUNTER_FREQUENCY	0xFE502A /* 16.66MHz from CPclk */
+
+/* Generic Interrupt Controller Definitions */
+#define GICD_BASE	(0xF1010000)
+#define GICC_BASE	(0xF1020000)
+#define CONFIG_GICV2
+
+/* i2c */
+#define CONFIG_SYS_I2C
+#define CONFIG_SYS_I2C_SH
+#define CONFIG_SYS_I2C_SLAVE		0x60
+#define CONFIG_SYS_I2C_SH_NUM_CONTROLLERS	1
+#define CONFIG_SYS_I2C_SH_SPEED0	400000
+#define CONFIG_SH_I2C_DATA_HIGH		4
+#define CONFIG_SH_I2C_DATA_LOW		5
+#define CONFIG_SH_I2C_CLOCK		10000000
+
+#define CONFIG_SYS_I2C_POWERIC_ADDR	0x30
+
+/* USB */
+#define CONFIG_USB_STORAGE
+#define CONFIG_USB_EHCI
+#define CONFIG_USB_EHCI_RCAR_GEN3
+#define CONFIG_USB_MAX_CONTROLLER_COUNT	2
+
+/* SDHI */
+#define CONFIG_MMC
+#define CONFIG_CMD_MMC
+#define CONFIG_GENERIC_MMC
+#define CONFIG_SH_SDHI_FREQ	200000000
+#define CONFIG_SH_SDHI_MMC
+
+/* Environment in eMMC, at the end of 2nd "boot sector" */
+#define CONFIG_ENV_IS_IN_MMC
+#define CONFIG_ENV_OFFSET	(-CONFIG_ENV_SIZE)
+#define CONFIG_SYS_MMC_ENV_DEV	1
+#define CONFIG_SYS_MMC_ENV_PART	2
+
+/* Module clock supply/stop status bits */
+/* MFIS */
+#define CONFIG_SMSTP2_ENA	0x00002000
+/* serial(SCIF2) */
+#define CONFIG_SMSTP3_ENA	0x00000400
+/* INTC-AP, INTC-EX */
+#define CONFIG_SMSTP4_ENA	0x00000180
+
+/* ENV setting */
+#define CONFIG_ENV_OVERWRITE
+#define CONFIG_ENV_SECT_SIZE	(128 * 1024)
+#define CONFIG_ENV_SIZE		(CONFIG_ENV_SECT_SIZE)
+#define CONFIG_ENV_SIZE_REDUND	(CONFIG_ENV_SIZE)
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	"fdt_high=0xffffffffffffffff\0" \
+	"initrd_high=0xffffffffffffffff\0"
+
+#define CONFIG_BOOTARGS \
+	"root=/dev/nfs rw " \
+	"nfsroot=192.168.0.1:/export/rfs ip=192.168.0.20"
+
+#define CONFIG_BOOTCOMMAND \
+	"tftp 0x48080000 Image; " \
+	"tftp 0x48000000 Image-r8a7795-h3ulcb.dtb; " \
+	"booti 0x48080000 - 0x48000000"
+
+#endif /* __H3ULCB_H */
-- 
1.9.1

